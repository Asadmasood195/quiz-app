[{"F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\index.tsx":"1","F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\reportWebVitals.ts":"2","F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\App.tsx":"3","F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\components\\Screens\\NewScreen.tsx":"4","F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\components\\question.ts":"5","F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\components\\Screens\\HomeScreen.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":475,"mtime":1607761311054,"results":"10","hashOfConfig":"8"},{"size":8593,"mtime":1607762083939,"results":"11","hashOfConfig":"8"},{"size":1700,"mtime":1607761165361,"results":"12","hashOfConfig":"8"},{"size":551,"mtime":1607762211419,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"o9zbkr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\index.tsx",[],["28","29"],"F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\reportWebVitals.ts",[],"F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\App.tsx",[],"F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\components\\Screens\\NewScreen.tsx",["30","31","32"],"import React, { Fragment, useState } from 'react'\r\nimport Countdown from \"react-countdown\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { questions as qs } from '../question';\r\n\r\nconst NewScreen = () => {\r\n\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [questions, setQuestions] = useState(qs);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [disabled, setDisabled] = useState(true)\r\n    const [score, setScore] = useState(0);\r\n\r\n    let array: string[] = []\r\n\r\n    const scoredData = () => {\r\n        qs.forEach((itm) => {\r\n            let correctAns = itm.correct\r\n            let userSelected = itm.userAnswer.answer\r\n            if (correctAns === userSelected) {\r\n                array.push(correctAns)\r\n                setScore(array.length)\r\n            }\r\n            return itm.userAnswer.answer\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    const submitHandler = (currentQuestion: number, index: number) => {\r\n\r\n        // add active class\r\n        questions[currentQuestion].answerOptions.forEach((itm) => {\r\n            itm.selected = false\r\n        });\r\n        questions[currentQuestion].answerOptions[index].selected = true;\r\n        setQuestions([...questions]);\r\n\r\n\r\n        questions[currentQuestion].userAnswer = questions[currentQuestion].answerOptions[index];\r\n        if (questions[currentQuestion].answerOptions) {\r\n            setDisabled(false)\r\n        } else {\r\n            setDisabled(true)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const nextQuestion = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const nextQuestion = currentQuestion + 1;\r\n        if (nextQuestion < questions.length) {\r\n            setCurrentQuestion(nextQuestion);\r\n            setDisabled(true)\r\n        } else {\r\n            setShowScore(true);\r\n        }\r\n        scoredData()\r\n    };\r\n\r\n\r\n    const Completionist = () => <span>You are good to go!</span>;\r\n    const timeCounter = ({ hours, minutes, seconds, completed }: any) => {\r\n        if (completed) {\r\n            return <Redirect to=\"/\" >You are good to go</Redirect>\r\n        } else {\r\n            return <span>{hours}:{minutes}:{seconds}</span>;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* < Countdown className=\"text-center\"\r\n                date={Date.now() + 10000}\r\n                renderer={timeCounter}\r\n            /> */}\r\n\r\n            {showScore ? (\r\n                <div className='container text-center'>\r\n                    <div className='modal-dialog'>\r\n                        <div className='modal-content'>\r\n                            <div className='modal-header'>\r\n                                <div className='modal-body'>\r\n                                    <h2>You Scored {' '}\r\n                                        {Math.floor(score / questions.length * 100)} {' '}\r\n                                          out of 100 </h2>\r\n                                    <h4>{Math.floor(score / questions.length * 100) >= 80 ?\r\n                                        <h2 className=\"text-success\">Excellent</h2> : Math.floor(score / questions.length * 100) >= 40 ? <h2 className=\"text-primary\">Normal</h2>\r\n                                            : <h2 className=\"text-danger\">Fail</h2>\r\n                                    }</h4>\r\n                                    <div className='col-xs-3 col-xs-offset-5'>\r\n                                        <div id='loadbar' style={{ display: 'none' }}>\r\n                                            <div className='blockG' id='rotateG_01' />\r\n                                            <div className='blockG' id='rotateG_02' />\r\n                                            <div className='blockG' id='rotateG_03' />\r\n                                            <div className='blockG' id='rotateG_04' />\r\n                                            <div className='blockG' id='rotateG_05' />\r\n                                            <div className='blockG' id='rotateG_06' />\r\n                                            <div className='blockG' id='rotateG_07' />\r\n                                            <div className='blockG' id='rotateG_08' />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>) : (\r\n                    <Fragment>\r\n\r\n\r\n                        <h2 className=\"text-center\">Quiz App with React-TypeScript</h2>\r\n                        <div className='modal-dialog'>\r\n                            <div className='modal-content'>\r\n\r\n                                <div className='modal-header'>\r\n\r\n\r\n                                    <h3>\r\n                                        <span className='label label-warning' id='qid'>\r\n                                            {currentQuestion + 1}\r\n                                        </span>{' '}\r\n                                        {questions[currentQuestion].questionText}\r\n                                    </h3>\r\n                                </div>\r\n                                <div className='modal-body'>\r\n                                    <div className='col-xs-3 col-xs-offset-5'>\r\n                                        <div id='loadbar' style={{ display: 'none' }}>\r\n                                            <div className='blockG' id='rotateG_01' />\r\n                                            <div className='blockG' id='rotateG_02' />\r\n                                            <div className='blockG' id='rotateG_03' />\r\n                                            <div className='blockG' id='rotateG_04' />\r\n                                            <div className='blockG' id='rotateG_05' />\r\n                                            <div className='blockG' id='rotateG_06' />\r\n                                            <div className='blockG' id='rotateG_07' />\r\n                                            <div className='blockG' id='rotateG_08' />\r\n                                        </div>\r\n                                    </div>\r\n                                    {questions[currentQuestion].answerOptions.map((answerOption, index) => (\r\n                                        <div id=\"myDIV\">\r\n                                            <button id=\"btn\" className={\"answerButtons btn btn-block element-animation1 \" + (answerOption.selected ? ' active' : '')}\r\n                                                onClick={\r\n                                                    (e) => submitHandler(currentQuestion, index)}\r\n                                            >\r\n\r\n                                                <span className='btn-label float-left'>\r\n                                                    <i className='glyphicon glyphicon-chevron-right' />\r\n                                                </span>{' '}\r\n                                                <span className=\r\n                                                    \"seeText\">{answerOption.answer\r\n                                                    }</span>\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                    <div className='modal-footer text-muted'>\r\n\r\n                                        <Link to=\"/\" >\r\n                                            <button className=\"btn btn-danger\" style={{\r\n                                                float: \"left\",\r\n                                                backgroundColor: \"red\"\r\n                                            }} >Cancel</button>\r\n                                        </Link>\r\n                                        <button\r\n                                            onClick={(e) =>\r\n                                                nextQuestion(e)}\r\n                                            className=\"btn btn-primary\"\r\n                                            id=\"next\"\r\n                                            disabled={disabled}\r\n                                        >Next</button>\r\n                                        <span id='answer' />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Fragment>\r\n                )\r\n            }\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default NewScreen\r\n","F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\components\\question.ts",[],"F:\\Gamica Cloud\\React\\$-TypeScript\\quiz-app\\src\\components\\Screens\\HomeScreen.tsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":17},{"ruleId":"37","severity":1,"message":"41","line":63,"column":11,"nodeType":"39","messageId":"40","endLine":63,"endColumn":24},{"ruleId":"37","severity":1,"message":"42","line":64,"column":11,"nodeType":"39","messageId":"40","endLine":64,"endColumn":22},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"@typescript-eslint/no-unused-vars","'Countdown' is defined but never used.","Identifier","unusedVar","'Completionist' is assigned a value but never used.","'timeCounter' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]